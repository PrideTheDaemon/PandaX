Note : PUT when object URL is used

List display:

-General: for all media id, GET localhost/api/media/{id}
	Gather each media data and show the important parts (title, creator…)
	Mayhap sort them later depending on their data

-By user: GET localhost/api/users/{user_id}/media_reviewed
	Gather each media data that a specific user reviewed




Single display:

-GET localhost/api/media/{id}
	Gather a particular media data




Post media:

-PUT localhost/api/media/<new media>
	Add a media object once the user has entered all the necessary information




Post review:

-PUT localhost/api/review/<new idea>
	Add a review linked to the media id and the user id




Delete review:

-DELETE localhost/api/review/{id}
	Remove a review from its id




Delete media:

-DELETE localhost/api/media/{id}
	Remove a media from its id (if there’s no other user’s review on it)


Realization of the ParamConverter

/*
public class MyParamConverter implements ParamConverter<MyObject>{
  @Override
  public MyObject fromString(String s){
    //imagine MyObject is a third party class
    return MyObjectFactory.get(s);
  }
  @Override
  public String toString(MyObject mo){
    return mo.toString();
  }
}

@Provider
public class MyParamConverterProvider implements ParamConverterProvider{
    @Override
    public <T> ParamConverter<T> getConverter(Class<T> rawType, Type genericType, Annotation[] annotations) {
        if(rawType.equals(MyObject.class)){
            return (ParamConverter<T>) new MyParamConverter();
        }
        return null;
    }
}*/

