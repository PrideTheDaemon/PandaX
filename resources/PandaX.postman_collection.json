{
	"info": {
		"_postman_id": "a850c540-e2cb-4167-a9d5-a9f31595b115",
		"name": "PandaX",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Security",
			"item": [
				{
					"name": "Auth – Obtain token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5104795f-8a74-4f82-a0ec-694b7fdac511",
								"exec": [
									"pm.test(\"Can log and request token\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token is valid\", function () {",
									"    pm.response.stream.toString().split(\".\").length",
									"});",
									"",
									"if(pm.response.code == 200) {",
									"    pm.collectionVariables.set(\"token\", pm.response.stream.toString());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login",
									"value": "{{login}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/token",
							"host": [
								"{{url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth – Verify token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1c32a53-56b2-4780-bb0d-9e6f54585357",
								"exec": [
									"pm.test(\"Answer is Pong !\", function () {",
									"    pm.expect(pm.response.stream.toString()).to.equal(\"Pong !\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "MediaType",
			"item": [
				{
					"name": "MediaType – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53003437-0327-4870-87f3-bb4f86c4443e",
								"exec": [
									"let mediaTypeTest = '{'",
									"+ '\"label\":\"Test media type\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"mediaTypeTest\", mediaTypeTest);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51039724-1d5b-4e47-b310-2f0335362f88",
								"exec": [
									"pm.test(\"Can create media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/mediatype/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(3);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaTypeId\", pm.response.stream.toString().split(\"/\")[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mediatype",
									"value": "{{mediaTypeTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/mediatype",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaType\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype/{{lastMediaTypeId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype",
								"{{lastMediaTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/mediatype/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype/{{lastMediaTypeId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype",
								"{{lastMediaTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType - Modify one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc972e87-8a4e-451d-a682-5c919c9af326",
								"exec": [
									"let newMediaType = JSON.parse(pm.collectionVariables.get(\"lastMediaType\"));",
									"",
									"newMediaType.label = 'updated type'",
									"",
									"pm.collectionVariables.set(\"lastMediaType\",JSON.stringify(newMediaType));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mediatype",
									"value": "{{lastMediaType}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/mediatype",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publisher",
			"item": [
				{
					"name": "Publisher – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53003437-0327-4870-87f3-bb4f86c4443e",
								"exec": [
									"let publisher = '{'",
									"+'\"denomination\":\"Test publisher\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"publisherTest\", publisher);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51039724-1d5b-4e47-b310-2f0335362f88",
								"exec": [
									"pm.test(\"Can create media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/publisher/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(3);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastPublisherId\", pm.response.stream.toString().split(\"/\")[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "publisher",
									"value": "{{publisherTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/publisher",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastPublisher\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher/{{lastPublisherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher",
								"{{lastPublisherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/publisher/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher/{{lastPublisherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher",
								"{{lastPublisherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher - Modify One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7bca421e-020e-4e25-95c8-f9975e9b9372",
								"exec": [
									"let newPublisher = JSON.parse(pm.collectionVariables.get(\"lastPublisher\"));",
									"",
									"newPublisher.denomination = 'updated publisher'",
									"",
									"pm.collectionVariables.set(\"lastPublisher\",JSON.stringify(newPublisher));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "publisher",
									"value": "{{lastPublisher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/publisher",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "User – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53003437-0327-4870-87f3-bb4f86c4443e",
								"exec": [
									"let user = '{'",
									"+'\"pseudo\":\"user test\",'",
									"+'\"pwd\":\"test\",'",
									"+'\"firstName\":\"test\",'",
									"+'\"lastName\":\"test\",'",
									"+'\"isAdmin\":\"1\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"userTest\", user);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51039724-1d5b-4e47-b310-2f0335362f88",
								"exec": [
									"pm.test(\"Can create user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/user/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(3);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastUserId\", pm.response.stream.toString().split(\"/\")[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user",
									"value": "{{userTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastUser\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/user/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Modify One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "10489106-0d67-4edf-ac56-46428e5e9495",
								"exec": [
									"let newUser = JSON.parse(pm.collectionVariables.get(\"lastUser\"));",
									"",
									"newUser.pseudo = 'updated pseudo'",
									"",
									"pm.collectionVariables.set(\"lastUser\",JSON.stringify(newUser));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user",
									"value": "{{lastUser}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Medias",
			"item": [
				{
					"name": "Media – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3cbd8481-61b2-4dca-8ccc-741bea743993",
								"exec": [
									"let media = '{'",
									"    + '\"title\" : \"Kung Fu Panda\",'",
									"    + '\"published\" : \"2019-11-11\",'",
									"    + '\"city\" : \"KungFuLand\",'",
									"    + '\"descript\" : \"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",'",
									"    + '\"imageUrl\" : \"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",'",
									"    + '\"user\" : ' + pm.collectionVariables.get(\"lastUser\") + ','",
									"    + '\"publisher\" :' + pm.collectionVariables.get(\"lastPublisher\") + ','",
									"    + '\"mediaType\" : ' + pm.collectionVariables.get(\"lastMediaType\")",
									"    + '}'",
									"",
									"pm.collectionVariables.set(\"mediaTest\", media);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "382afe47-2d71-42a8-bf12-c9ddb04027d8",
								"exec": [
									"pm.test(\"Can create media\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/media/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(6);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaId\", pm.response.stream.toString().split(\"/\")[5]);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "media",
									"value": "{{mediaTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"media"
							]
						},
						"description": "In order for this request to work, the POST and GET from MediaType, Publisher and User must be launched before"
					},
					"response": []
				},
				{
					"name": "Media – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can get a media\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.collectionVariables.set(\"lastMedia\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/media/{{lastMediaId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								"{{lastMediaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/media/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/media/{{lastMediaId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								"{{lastMediaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media - Modify one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17059c4d-b2cf-4ed8-8b53-4ed573186613",
								"exec": [
									"let newMedia = JSON.parse(pm.collectionVariables.get(\"lastMedia\"));",
									"",
									"newMedia.title = 'Kung Fu Panda 2 updated'",
									"newMedia.descript = 'Lord Shen, the scion of a peacock clan that rules Gongmen City in ancient China, seeks to weaponize his family s recently invented fireworks. After discovering from the court s goat soothsayer that a warrior of black-and-white will defeat him if he does not change his ways, Shen leads an army of wolves to exterminate the panda population to avert the prophecy. Shen s parents are horrified by this atrocity and exile him as punishment.'",
									"",
									"pm.collectionVariables.set(\"lastMedia\",JSON.stringify(newMedia));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "media",
									"value": "{{lastMedia}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"media"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Comment – Create one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/comment/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(10);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastCommentId\", pm.response.stream.toString().split(\"/\")[5]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b79c7a7-c1e5-4f69-8670-48b50b5f1a0f",
								"exec": [
									"let commentTest = '{'\r",
									"    +'    \"content\": \"test\",'\r",
									"    +'    \"media\": ' + pm.collectionVariables.get(\"lastMedia\") + ','\r",
									"    +'    \"user\": ' + pm.collectionVariables.get(\"lastUser\")\r",
									"    +'}';\r",
									"    \r",
									"pm.collectionVariables.set(\"commentTest\", commentTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "comment",
									"value": "{{commentTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastComment\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/comment/{{lastCommentId}}/media/{{lastMediaId}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment",
								"{{lastCommentId}}",
								"media",
								"{{lastMediaId}}",
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Get all for user and media",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request all coments for a user and media\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/media/{{lastMediaId}}/user/{{lastUserId}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								"{{lastMediaId}}",
								"user",
								"{{lastUserId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request all comments\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaType\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/comment/{{lastCommentId}}/media/{{lastMediaId}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment",
								"{{lastCommentId}}",
								"media",
								"{{lastMediaId}}",
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "17e81533-a19e-43c1-a507-33b48d0a62b9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d7dcb7b2-ff4d-4c5c-96e9-db39e96f3c4c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7e6c8b94-b501-4a0e-b801-b26badddb6f5",
			"key": "url",
			"value": "localhost:8080/PandaX",
			"type": "string"
		},
		{
			"id": "aebc20dd-c6e2-484e-8c22-658b6da12123",
			"key": "token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1IiwiZXhwIjoxNTc1MjQ4NzE2LCJpYXQiOjE1NzQ4MTY3MTYsImlzcyI6IlBhbmRhWCBSRVNUIEFQSSIsInJvbCI6IkFETUlOIiwibmFtIjoicGFuZGEifQ.9MWhsyS9JstMO1jfyQsCQpUvBJ7itaMDBRSTGzAe2QZqqDK5hJHhuZUNG7-6nzu_KG2QP9FB-rWUAyXqfvTKEg",
			"type": "string"
		},
		{
			"id": "7eaabb7d-5eb3-4a76-aa81-9c2d7cdf5e1e",
			"key": "login",
			"value": "panda",
			"type": "string"
		},
		{
			"id": "faa0f9e8-bdc2-450f-9e2a-12ace495c38d",
			"key": "password",
			"value": "panda",
			"type": "string"
		},
		{
			"id": "767e1a65-b8e8-472b-95e0-b4d149cc0dda",
			"key": "media",
			"value": "{\"title\" : \"Kung Fu Panda\",\"published\" : \"2019-11-11\",\"city\" : \"KungFuLand\",\"descript\" : \"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",\"imageUrl\" : \"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",\"user\" : {\"id\":\"5\",\"pseudo\":\"panda\",\"pwd\":\"panda\",\"firstName\":\"Xi\",\"lastName\":\"Jinping\",\"isAdmin\":\"1\"},\"publisher\" :{\"id\":\"11\",\"denomination\":\"Metal Records\"},\"mediaType\" : {\"id\":\"1\",\"label\":\"Animation\"}}",
			"type": "string"
		},
		{
			"id": "72fada83-f4ae-48db-8619-3695f177db97",
			"key": "deleteId",
			"value": "3",
			"type": "string"
		},
		{
			"id": "7dd0c9d5-3a27-4026-8146-83a1fa4fea2b",
			"key": "mediaId",
			"value": "4",
			"type": "string"
		},
		{
			"id": "8aa53bd3-26ba-412c-a1a2-6efb203cbe24",
			"key": "mediaType",
			"value": "{\"label\":\"Test media type\"}",
			"type": "string"
		},
		{
			"id": "d3f0ac71-fb3b-47dd-aaeb-a20049718659",
			"key": "lastMediaTypeId",
			"value": "19",
			"type": "string"
		},
		{
			"id": "e64a3d75-0872-4ee4-bb47-caa19479d54b",
			"key": "publisherTest",
			"value": "{\"denomination\":\"Test publisher\"}",
			"type": "string"
		},
		{
			"id": "394c2f2a-286a-4e16-b77f-57f1f4744223",
			"key": "lastPublisherId",
			"value": "13",
			"type": "string"
		},
		{
			"id": "32bb6b35-22ab-4515-a98b-bf6b91e68c8d",
			"key": "mediaTypeTest",
			"value": "{\"label\":\"Test media type\"}",
			"type": "string"
		},
		{
			"id": "2bc587c6-eaf0-4159-9489-aded118d7e41",
			"key": "userTest",
			"value": "{\"pseudo\":\"user test\",\"pwd\":\"test\",\"firstName\":\"test\",\"lastName\":\"test\",\"isAdmin\":\"1\"}",
			"type": "string"
		},
		{
			"id": "e133a9ff-f950-4b5f-8772-8097edc42517",
			"key": "lastUserId",
			"value": "6",
			"type": "string"
		},
		{
			"id": "af9294f5-7084-4419-86d5-b37b2d7ea79e",
			"key": "mediaTest",
			"value": "{\"title\" : \"Kung Fu Panda\",\"published\" : \"2019-11-11\",\"city\" : \"KungFuLand\",\"descript\" : \"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",\"imageUrl\" : \"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",\"user\" : {\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"},\"publisher\" :{\"denomination\":\"Test publisher\",\"id\":13},\"mediaType\" : {\"id\":19,\"label\":\"Test media type\"}}",
			"type": "string"
		},
		{
			"id": "ec4c197b-2315-4b9c-b6bd-287d44275009",
			"key": "lastMediaId",
			"value": "1",
			"type": "string"
		},
		{
			"id": "187f12f3-4360-4bd0-93a6-59aee9997d01",
			"key": "lastUser",
			"value": "{\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}",
			"type": "string"
		},
		{
			"id": "dc0c033b-22fe-4b01-9978-ca94c6d53e1b",
			"key": "lastPublisher",
			"value": "{\"denomination\":\"Test publisher\",\"id\":13}",
			"type": "string"
		},
		{
			"id": "16b9555c-4886-4462-8660-55495de58eea",
			"key": "lastMediaType",
			"value": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1><hr class=\"line\" /><p><b>Type</b> Status Report</p><p><b>Message</b> Not Found</p><p><b>Description</b> The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.</p><hr class=\"line\" /><h3>Apache Tomcat/8.5.47</h3></body></html>",
			"type": "string"
		},
		{
			"id": "553eb1b3-07b4-4896-8180-49c815fa89fa",
			"key": "mediaToChange",
			"value": "{\"id\" : 1,\"title\" : \"Kung Fu Panda 2 Updated\",\"published\" : \"2019-11-11\",\"city\" : \"KungFuLand\",\"descript\" : \"Lord Shen, the scion of a peacock clan that rules Gongmen City in ancient China, seeks to weaponize his family s recently invented fireworks. After discovering from the court s goat soothsayer that a warrior of black-and-white will defeat him if he does not change his ways, Shen leads an army of wolves to exterminate the panda population to avert the prophecy. Shens parents are horrified by this atrocity and exile him as punishment.\",\"imageUrl\" : \"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\"}",
			"type": "string"
		},
		{
			"id": "ee7550b7-ccab-4659-8f8c-59b4f54df242",
			"key": "lastMedia",
			"value": "{\"city\":\"KungFuLand\",\"descript\":\"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",\"id\":1,\"imageUrl\":\"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",\"mediaType\":{\"id\":19,\"label\":\"Test media type\"},\"published\":\"2019-11-11T00:00:00+01:00\",\"publisher\":{\"denomination\":\"Test publisher\",\"id\":13},\"title\":\"Kung Fu Panda\",\"user\":{\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}}",
			"type": "string"
		},
		{
			"id": "5f5f940b-986b-41ae-8d5c-d15e67cb540c",
			"key": "lastCommentId",
			"value": "h1><hr class=\"line\" ",
			"type": "string"
		},
		{
			"id": "ce8d3cd5-2e15-413b-b128-def6799a05b0",
			"key": "lastComment",
			"value": "{\"content\":\"test\",\"dateMade\":\"2019-11-27T00:00:00+01:00\",\"id\":6,\"media\":{\"city\":\"KungFuLand\",\"descript\":\"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",\"id\":1,\"imageUrl\":\"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",\"mediaType\":{\"id\":19,\"label\":\"Test media type\"},\"published\":\"2019-11-11T00:00:00+01:00\",\"publisher\":{\"denomination\":\"Test publisher\",\"id\":13},\"title\":\"Kung Fu Panda\",\"user\":{\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}},\"user\":{\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}}",
			"type": "string"
		},
		{
			"id": "6b683e18-225c-445f-9e06-1bfff3659e3a",
			"key": "commentTest",
			"value": "{    \"content\": \"test\",    \"media\": {\"city\":\"KungFuLand\",\"descript\":\"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",\"id\":1,\"imageUrl\":\"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",\"mediaType\":{\"id\":19,\"label\":\"Test media type\"},\"published\":\"2019-11-11T00:00:00+01:00\",\"publisher\":{\"denomination\":\"Test publisher\",\"id\":13},\"title\":\"Kung Fu Panda\",\"user\":{\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}},    \"user\": {\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}}",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}