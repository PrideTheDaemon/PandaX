{
	"info": {
		"_postman_id": "ad04b255-f810-42a7-84e6-5729907ad155",
		"name": "PandaX",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Security",
			"item": [
				{
					"name": "Auth – Obtain token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5104795f-8a74-4f82-a0ec-694b7fdac511",
								"exec": [
									"pm.test(\"Can log and request token\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token is valid\", function () {",
									"    pm.response.stream.toString().split(\".\").length",
									"});",
									"",
									"if(pm.response.code == 200) {",
									"    pm.collectionVariables.set(\"token\", pm.response.stream.toString());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login",
									"value": "{{login}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/token",
							"host": [
								"{{url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth – Verify token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1c32a53-56b2-4780-bb0d-9e6f54585357",
								"exec": [
									"pm.test(\"Answer is Pong !\", function () {",
									"    pm.expect(pm.response.stream.toString()).to.equal(\"Pong !\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "MediaType",
			"item": [
				{
					"name": "MediaType – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53003437-0327-4870-87f3-bb4f86c4443e",
								"exec": [
									"let mediaTypeTest = '{'",
									"+ '\"label\":\"Test media type\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"mediaTypeTest\", mediaTypeTest);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51039724-1d5b-4e47-b310-2f0335362f88",
								"exec": [
									"pm.test(\"Can create media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/mediatype/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(6);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaTypeId\", pm.response.stream.toString().split(\"/\")[5]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mediatype",
									"value": "{{mediaTypeTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/mediatype",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaType\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype/{{lastMediaTypeId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype",
								"{{lastMediaTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/mediatype\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype/{{lastMediaTypeId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype",
								"{{lastMediaTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType - Modify one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc972e87-8a4e-451d-a682-5c919c9af326",
								"exec": [
									"let newMediaType = JSON.parse(pm.collectionVariables.get(\"lastMediaType\"));",
									"",
									"newMediaType.label = 'updated type'",
									"",
									"pm.collectionVariables.set(\"lastMediaType\",JSON.stringify(newMediaType));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mediatype",
									"value": "{{lastMediaType}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/mediatype",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Get all media",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastComment\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype/{{lastMediaTypeId}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype",
								"{{lastMediaTypeId}}",
								"media"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publisher",
			"item": [
				{
					"name": "Publisher – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53003437-0327-4870-87f3-bb4f86c4443e",
								"exec": [
									"let publisher = '{'",
									"+'\"denomination\":\"Test publisher\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"publisherTest\", publisher);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51039724-1d5b-4e47-b310-2f0335362f88",
								"exec": [
									"pm.test(\"Can create media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/publisher/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(6);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastPublisherId\", pm.response.stream.toString().split(\"/\")[5]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "publisher",
									"value": "{{publisherTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/publisher",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastPublisher\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher/{{lastPublisherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher",
								"{{lastPublisherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/publisher\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher/{{lastPublisherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher",
								"{{lastPublisherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher - Modify One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7bca421e-020e-4e25-95c8-f9975e9b9372",
								"exec": [
									"let newPublisher = JSON.parse(pm.collectionVariables.get(\"lastPublisher\"));",
									"",
									"newPublisher.denomination = 'updated publisher'",
									"",
									"pm.collectionVariables.set(\"lastPublisher\",JSON.stringify(newPublisher));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "publisher",
									"value": "{{lastPublisher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/publisher",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Get all media",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastComment\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher/{{lastPublisherId}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher",
								"{{lastPublisherId}}",
								"media"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "User – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53003437-0327-4870-87f3-bb4f86c4443e",
								"exec": [
									"let user = '{'",
									"+'\"pseudo\":\"user test\",'",
									"+'\"pwd\":\"test\",'",
									"+'\"firstName\":\"test\",'",
									"+'\"lastName\":\"test\",'",
									"+'\"isAdmin\":\"1\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"userTest\", user);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51039724-1d5b-4e47-b310-2f0335362f88",
								"exec": [
									"pm.test(\"Can create user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/user/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(6);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastUserId\", pm.response.stream.toString().split(\"/\")[5]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user",
									"value": "{{userTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastUser\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Modify One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "10489106-0d67-4edf-ac56-46428e5e9495",
								"exec": [
									"let newUser = JSON.parse(pm.collectionVariables.get(\"lastUser\"));",
									"",
									"newUser.pseudo = 'updated pseudo'",
									"",
									"pm.collectionVariables.set(\"lastUser\", JSON.stringify(newUser));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5ba2c2ba-4c2b-452e-87fe-826abed1d058",
								"exec": [
									"pm.test(\"Can request a user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user",
									"value": "{{lastUser}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Get all Possessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5042d08e-4e39-4872-9457-33a5ba4442dc",
								"exec": [
									"pm.test(\"Can request a user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - create possession",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c4f1f1ac-74cc-4282-91f2-f7d26bd007f3",
								"exec": [
									"let possession = '{'",
									"+'\"user\":'+pm.collectionVariables.get(\"lastUser\")+','",
									"+'\"media\": '+ pm.collectionVariables.get(\"lastMedia\") + ','",
									"+'\"dateAcquired\":\"2019-11-05\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"possessionTest\", possession);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "possession",
									"value": "{{possessionTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}/media/{{lastMediaId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}",
								"media",
								"{{lastMediaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Delete possession",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}/media/{{lastMediaId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}",
								"media",
								"{{lastMediaId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Medias",
			"item": [
				{
					"name": "Media – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3cbd8481-61b2-4dca-8ccc-741bea743993",
								"exec": [
									"let media = '{'",
									"    + '\"title\" : \"Kung Fu Panda\",'",
									"    + '\"published\" : \"2019-11-11\",'",
									"    + '\"city\" : \"KungFuLand\",'",
									"    + '\"descript\" : \"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",'",
									"    + '\"imageUrl\" : \"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",'",
									"    + '\"user\" : ' + pm.collectionVariables.get(\"lastUser\") + ','",
									"    + '\"publisher\" :' + pm.collectionVariables.get(\"lastPublisher\") + ','",
									"    + '\"mediaType\" : ' + pm.collectionVariables.get(\"lastMediaType\")",
									"    + '}'",
									"",
									"pm.collectionVariables.set(\"mediaTest\", media);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "382afe47-2d71-42a8-bf12-c9ddb04027d8",
								"exec": [
									"pm.test(\"Can create media\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/media/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(6);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaId\", pm.response.stream.toString().split(\"/\")[5]);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "media",
									"value": "{{mediaTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"media"
							]
						},
						"description": "In order for this request to work, the POST and GET from MediaType, Publisher and User must be launched before"
					},
					"response": []
				},
				{
					"name": "Media – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can get a media\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.collectionVariables.set(\"lastMedia\", pm.response.stream.toString());",
									"",
									"pm.collectionVariables.set(\"lastMediaCity\", JSON.parse(pm.collectionVariables.get(\"lastMedia\")).city);",
									"",
									"pm.collectionVariables.set(\"lastMediaTitle\", JSON.parse(pm.collectionVariables.get(\"lastMedia\")).title);",
									"",
									"pm.collectionVariables.set(\"lastMediaDescript\", JSON.parse(pm.collectionVariables.get(\"lastMedia\")).descript);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/media/{{lastMediaId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								"{{lastMediaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/media\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/media/{{lastMediaId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								"{{lastMediaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media - Modify one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17059c4d-b2cf-4ed8-8b53-4ed573186613",
								"exec": [
									"let newMedia = JSON.parse(pm.collectionVariables.get(\"lastMedia\"));",
									"",
									"newMedia.title = 'Kung Fu Panda 2 updated';",
									"newMedia.descript = 'Lord Shen, the scion of a peacock clan that rules Gongmen City in ancient China, seeks to weaponize his family s recently invented fireworks. After discovering from the court s goat soothsayer that a warrior of black-and-white will defeat him if he does not change his ways, Shen leads an army of wolves to exterminate the panda population to avert the prophecy. Shen s parents are horrified by this atrocity and exile him as punishment.';",
									"",
									"pm.collectionVariables.set(\"lastMedia\", JSON.stringify(newMedia));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "media",
									"value": "{{lastMedia}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media - Get by parameters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/media/?city={{lastMediaCity}}&title={{lastMediaTitle}}&descript={{lastMediaDescript}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								""
							],
							"query": [
								{
									"key": "city",
									"value": "{{lastMediaCity}}"
								},
								{
									"key": "title",
									"value": "{{lastMediaTitle}}"
								},
								{
									"key": "descript",
									"value": "{{lastMediaDescript}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Comment – Create one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/comment/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(10);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastCommentId\", pm.response.stream.toString().split(\"/\")[5]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b79c7a7-c1e5-4f69-8670-48b50b5f1a0f",
								"exec": [
									"let commentTest = '{'\r",
									"    +'    \"content\": \"test\",'\r",
									"    +'    \"media\": ' + pm.collectionVariables.get(\"lastMedia\") + ','\r",
									"    +'    \"user\": ' + pm.collectionVariables.get(\"lastUser\")\r",
									"    +'}';\r",
									"    \r",
									"pm.collectionVariables.set(\"commentTest\", commentTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "comment",
									"value": "{{commentTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastComment\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/comment/{{lastCommentId}}/media/{{lastMediaId}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment",
								"{{lastCommentId}}",
								"media",
								"{{lastMediaId}}",
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Get all for user and media",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request all coments for a user and media\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/media/{{lastMediaId}}/user/{{lastUserId}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								"{{lastMediaId}}",
								"user",
								"{{lastUserId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request all comments\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaType\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/comment/{{lastCommentId}}/media/{{lastMediaId}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment",
								"{{lastCommentId}}",
								"media",
								"{{lastMediaId}}",
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment - Modify ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8bc9994e-5edf-4b8c-887c-c71bc1d52cd8",
								"exec": [
									"let newComment = JSON.parse(pm.collectionVariables.get(\"lastComment\"));",
									"",
									"newComment.content = 'comment updated';",
									"",
									"pm.collectionVariables.set(\"lastComment\", JSON.stringify(newComment));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "comment",
									"value": "{{lastComment}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "17e81533-a19e-43c1-a507-33b48d0a62b9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d7dcb7b2-ff4d-4c5c-96e9-db39e96f3c4c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "386845dd-6f10-4089-8e15-f037d98a6c24",
			"key": "url",
			"value": "localhost:8080/PandaX",
			"type": "string"
		},
		{
			"id": "e3ca4557-b522-44de-ac6f-a37ee7255d79",
			"key": "password",
			"value": "panda",
			"type": "string"
		},
		{
			"id": "6c718dc5-d300-4e78-be55-41f549f0eb3f",
			"key": "login",
			"value": "panda",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}