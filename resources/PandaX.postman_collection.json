{
	"info": {
		"_postman_id": "f6fa2a6c-477f-41ae-b1b1-49444f6a050d",
		"name": "PandaX",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Security",
			"item": [
				{
					"name": "Auth – Obtain token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5104795f-8a74-4f82-a0ec-694b7fdac511",
								"exec": [
									"pm.test(\"Can log and request token\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Token is valid\", function () {",
									"    pm.response.stream.toString().split(\".\").length",
									"});",
									"",
									"if(pm.response.code == 200) {",
									"    pm.collectionVariables.set(\"token\", pm.response.stream.toString());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "login",
									"value": "{{login}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/token",
							"host": [
								"{{url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth – Verify token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1c32a53-56b2-4780-bb0d-9e6f54585357",
								"exec": [
									"pm.test(\"Answer is Pong !\", function () {",
									"    pm.expect(pm.response.stream.toString()).to.equal(\"Pong !\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "MediaType",
			"item": [
				{
					"name": "MediaType – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53003437-0327-4870-87f3-bb4f86c4443e",
								"exec": [
									"let mediaTypeTest = '{'",
									"+ '\"label\":\"Test media type\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"mediaTypeTest\", mediaTypeTest);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51039724-1d5b-4e47-b310-2f0335362f88",
								"exec": [
									"pm.test(\"Can create media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/mediatype/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(3);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaTypeId\", pm.response.stream.toString().split(\"/\")[2]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mediatype",
									"value": "{{mediaTypeTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/mediatype",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaType\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype/{{lastMediaTypeId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype",
								"{{lastMediaTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/mediatype/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype/{{lastMediaTypeId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype",
								"{{lastMediaTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType - Modify one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc972e87-8a4e-451d-a682-5c919c9af326",
								"exec": [
									"let newMediaType = JSON.parse(pm.collectionVariables.get(\"lastMediaType\"));",
									"",
									"newMediaType.label = 'updated type'",
									"",
									"pm.collectionVariables.set(\"lastMediaType\",JSON.stringify(newMediaType));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "mediatype",
									"value": "{{lastMediaType}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/mediatype",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype"
							]
						}
					},
					"response": []
				},
				{
					"name": "MediaType – Get all media",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastComment\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/mediatype/{{lastMediaTypeId}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"mediatype",
								"{{lastMediaTypeId}}",
								"media"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publisher",
			"item": [
				{
					"name": "Publisher – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53003437-0327-4870-87f3-bb4f86c4443e",
								"exec": [
									"let publisher = '{'",
									"+'\"denomination\":\"Test publisher\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"publisherTest\", publisher);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51039724-1d5b-4e47-b310-2f0335362f88",
								"exec": [
									"pm.test(\"Can create media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/publisher/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(3);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastPublisherId\", pm.response.stream.toString().split(\"/\")[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "publisher",
									"value": "{{publisherTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/publisher",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastPublisher\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher/{{lastPublisherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher",
								"{{lastPublisherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/publisher/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher/{{lastPublisherId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher",
								"{{lastPublisherId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher - Modify One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7bca421e-020e-4e25-95c8-f9975e9b9372",
								"exec": [
									"let newPublisher = JSON.parse(pm.collectionVariables.get(\"lastPublisher\"));",
									"",
									"newPublisher.denomination = 'updated publisher'",
									"",
									"pm.collectionVariables.set(\"lastPublisher\",JSON.stringify(newPublisher));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "publisher",
									"value": "{{lastPublisher}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/publisher",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher – Get all media",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastComment\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/publisher/{{lastPublisherId}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"publisher",
								"{{lastPublisherId}}",
								"media"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "User – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53003437-0327-4870-87f3-bb4f86c4443e",
								"exec": [
									"let user = '{'",
									"+'\"pseudo\":\"user test\",'",
									"+'\"pwd\":\"test\",'",
									"+'\"firstName\":\"test\",'",
									"+'\"lastName\":\"test\",'",
									"+'\"isAdmin\":\"1\"'",
									"+'}'",
									"",
									"pm.collectionVariables.set(\"userTest\", user);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51039724-1d5b-4e47-b310-2f0335362f88",
								"exec": [
									"pm.test(\"Can create user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/user/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(3);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastUserId\", pm.response.stream.toString().split(\"/\")[2]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user",
									"value": "{{userTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastUser\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/user/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Modify One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "10489106-0d67-4edf-ac56-46428e5e9495",
								"exec": [
									"let newUser = JSON.parse(pm.collectionVariables.get(\"lastUser\"));",
									"",
									"newUser.pseudo = 'updated pseudo'",
									"",
									"pm.collectionVariables.set(\"lastUser\",JSON.stringify(newUser));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user",
									"value": "{{lastUser}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User - Get all Possessions",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{url}}/user/{{lastUserId}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"{{lastUserId}}",
								"media"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Medias",
			"item": [
				{
					"name": "Media – Create one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3cbd8481-61b2-4dca-8ccc-741bea743993",
								"exec": [
									"let media = '{'",
									"    + '\"title\" : \"Kung Fu Panda\",'",
									"    + '\"published\" : \"2019-11-11\",'",
									"    + '\"city\" : \"KungFuLand\",'",
									"    + '\"descript\" : \"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",'",
									"    + '\"imageUrl\" : \"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",'",
									"    + '\"user\" : ' + pm.collectionVariables.get(\"lastUser\") + ','",
									"    + '\"publisher\" :' + pm.collectionVariables.get(\"lastPublisher\") + ','",
									"    + '\"mediaType\" : ' + pm.collectionVariables.get(\"lastMediaType\")",
									"    + '}'",
									"",
									"pm.collectionVariables.set(\"mediaTest\", media);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "382afe47-2d71-42a8-bf12-c9ddb04027d8",
								"exec": [
									"pm.test(\"Can create media\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/media/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(6);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaId\", pm.response.stream.toString().split(\"/\")[5]);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "media",
									"value": "{{mediaTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"media"
							]
						},
						"description": "In order for this request to work, the POST and GET from MediaType, Publisher and User must be launched before"
					},
					"response": []
				},
				{
					"name": "Media – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can get a media\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.collectionVariables.set(\"lastMedia\", pm.response.stream.toString());",
									"",
									"pm.collectionVariables.set(\"lastMediaCity\",JSON.parse(pm.collectionVariables.get(\"lastMedia\")).city);",
									"",
									"pm.collectionVariables.set(\"lastMediaTitle\",JSON.parse(pm.collectionVariables.get(\"lastMedia\")).title);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/media/{{lastMediaId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								"{{lastMediaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0e3ec86-bbb8-4844-881e-62bc23fb7590",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/media/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/media/{{lastMediaId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								"{{lastMediaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Request succeeds\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media - Modify one",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17059c4d-b2cf-4ed8-8b53-4ed573186613",
								"exec": [
									"let newMedia = JSON.parse(pm.collectionVariables.get(\"lastMedia\"));",
									"",
									"newMedia.title = 'Kung Fu Panda 2 updated'",
									"newMedia.descript = 'Lord Shen, the scion of a peacock clan that rules Gongmen City in ancient China, seeks to weaponize his family s recently invented fireworks. After discovering from the court s goat soothsayer that a warrior of black-and-white will defeat him if he does not change his ways, Shen leads an army of wolves to exterminate the panda population to avert the prophecy. Shen s parents are horrified by this atrocity and exile him as punishment.'",
									"",
									"pm.collectionVariables.set(\"lastMedia\",JSON.stringify(newMedia));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "media",
									"value": "{{lastMedia}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/media",
							"host": [
								"{{url}}"
							],
							"path": [
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "Media - get by city",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/media/?city={{lastMediaCity}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								""
							],
							"query": [
								{
									"key": "city",
									"value": "{{lastMediaCity}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Media - get by title",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/media/?title={{lastMediaTitle}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								""
							],
							"query": [
								{
									"key": "title",
									"value": "{{lastMediaTitle}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Comment – Create one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returned a path\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"/comment/\");",
									"});",
									"",
									"pm.test(\"Return path is well formed\", function () {",
									"    pm.expect(pm.response.stream.toString().split(\"/\").length).to.equal(10);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastCommentId\", pm.response.stream.toString().split(\"/\")[5]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b79c7a7-c1e5-4f69-8670-48b50b5f1a0f",
								"exec": [
									"let commentTest = '{'\r",
									"    +'    \"content\": \"test\",'\r",
									"    +'    \"media\": ' + pm.collectionVariables.get(\"lastMedia\") + ','\r",
									"    +'    \"user\": ' + pm.collectionVariables.get(\"lastUser\")\r",
									"    +'}';\r",
									"    \r",
									"pm.collectionVariables.set(\"commentTest\", commentTest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "comment",
									"value": "{{commentTest}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Get one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a comment\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastComment\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/comment/{{lastCommentId}}/media/{{lastMediaId}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment",
								"{{lastCommentId}}",
								"media",
								"{{lastMediaId}}",
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Get all for user and media",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request all coments for a user and media\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/media/{{lastMediaId}}/user/{{lastUserId}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"media",
								"{{lastMediaId}}",
								"user",
								"{{lastUserId}}",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request all comments\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment – Delete one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8aff33e-e53f-45c3-922e-0c3c3d10d55f",
								"exec": [
									"pm.test(\"Can request a media type\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.collectionVariables.set(\"lastMediaType\", pm.response.stream.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/comment/{{lastCommentId}}/media/{{lastMediaId}}/user/{{lastUserId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment",
								"{{lastCommentId}}",
								"media",
								"{{lastMediaId}}",
								"user",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "17e81533-a19e-43c1-a507-33b48d0a62b9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d7dcb7b2-ff4d-4c5c-96e9-db39e96f3c4c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f95e0cb7-3d6b-43ee-a8e7-af5e19eb2f8c",
			"key": "url",
			"value": "localhost:8080/PandaX",
			"type": "string"
		},
		{
			"id": "fa9adcc4-7afe-45a4-b362-3c56fd1f5563",
			"key": "token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiI1IiwiZXhwIjoxNTc1MzE2NTMxLCJpYXQiOjE1NzQ4ODQ1MzEsImlzcyI6IlBhbmRhWCBSRVNUIEFQSSIsInJvbCI6IkFETUlOIiwibmFtIjoicGFuZGEifQ.xXk7Ra_lA8nUkdXVFnsMkiaDQwXIOHCFr3-dQycI43Ia4Vrbv2AlLu7-FJ1HxPMH3WhcAqJkeGmutMbFvPGwNw",
			"type": "string"
		},
		{
			"id": "4ae43056-c877-4342-a6bb-4560507a34bd",
			"key": "login",
			"value": "panda",
			"type": "string"
		},
		{
			"id": "ef2b2089-15ce-45cf-bbdf-eea1f846861e",
			"key": "password",
			"value": "panda",
			"type": "string"
		},
		{
			"id": "3d8ad48f-28b1-4b4d-9c38-262325500352",
			"key": "media",
			"value": "{\"title\" : \"Kung Fu Panda\",\"published\" : \"2019-11-11\",\"city\" : \"KungFuLand\",\"descript\" : \"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",\"imageUrl\" : \"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",\"user\" : {\"id\":\"5\",\"pseudo\":\"panda\",\"pwd\":\"panda\",\"firstName\":\"Xi\",\"lastName\":\"Jinping\",\"isAdmin\":\"1\"},\"publisher\" :{\"id\":\"11\",\"denomination\":\"Metal Records\"},\"mediaType\" : {\"id\":\"1\",\"label\":\"Animation\"}}",
			"type": "string"
		},
		{
			"id": "275ad83f-a0db-4da9-9e24-d0cbdc0348f8",
			"key": "deleteId",
			"value": "3",
			"type": "string"
		},
		{
			"id": "f114c4fe-a9f4-48ff-b835-329e3582d5ae",
			"key": "mediaId",
			"value": "4",
			"type": "string"
		},
		{
			"id": "d1d90a11-0a00-4cde-b221-b709fafb005c",
			"key": "mediaType",
			"value": "{\"label\":\"Test media type\"}",
			"type": "string"
		},
		{
			"id": "cb45a379-a29f-4a4a-a486-975d99307da2",
			"key": "lastMediaTypeId",
			"value": "28",
			"type": "string"
		},
		{
			"id": "b3020e7a-4f28-47e6-a58d-d6660d1e16df",
			"key": "publisherTest",
			"value": "{\"denomination\":\"Test publisher\"}",
			"type": "string"
		},
		{
			"id": "41908c42-de16-4bfc-ac1a-f423e4fb899d",
			"key": "lastPublisherId",
			"value": "14",
			"type": "string"
		},
		{
			"id": "a79558db-49b4-4866-8033-5ca4bee383fe",
			"key": "mediaTypeTest",
			"value": "{\"label\":\"Test media type\"}",
			"type": "string"
		},
		{
			"id": "bafc3348-76a0-4495-9463-fcb3883f1d8d",
			"key": "userTest",
			"value": "{\"pseudo\":\"user test\",\"pwd\":\"test\",\"firstName\":\"test\",\"lastName\":\"test\",\"isAdmin\":\"1\"}",
			"type": "string"
		},
		{
			"id": "a92877c9-77a3-469a-9f21-edf8afcef264",
			"key": "lastUserId",
			"value": "7",
			"type": "string"
		},
		{
			"id": "e204b47f-f9bb-484c-b4c9-ec121cb0e8a2",
			"key": "mediaTest",
			"value": "{\"title\" : \"Kung Fu Panda\",\"published\" : \"2019-11-11\",\"city\" : \"KungFuLand\",\"descript\" : \"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",\"imageUrl\" : \"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",\"user\" : {\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"},\"publisher\" :{\"denomination\":\"Test publisher\",\"id\":14},\"mediaType\" : {\"id\":28,\"label\":\"Test media type\"}}",
			"type": "string"
		},
		{
			"id": "ec11c224-2103-45bf-92ec-dc378854f815",
			"key": "lastMediaId",
			"value": "1",
			"type": "string"
		},
		{
			"id": "2cc2ede7-a5ae-43a1-8cad-7aaecfdb28db",
			"key": "lastUser",
			"value": "{\"admin\":false,\"firstName\":\"test\",\"id\":7,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}",
			"type": "string"
		},
		{
			"id": "f06e78f6-f36e-4175-87f1-444b05041f85",
			"key": "lastPublisher",
			"value": "{\"denomination\":\"Test publisher\",\"id\":14}",
			"type": "string"
		},
		{
			"id": "ac2928e8-5937-4931-8b1d-3c1cdcef70f1",
			"key": "lastMediaType",
			"value": "{\"id\":28,\"label\":\"Test media type\"}",
			"type": "string"
		},
		{
			"id": "5523cf22-ab32-4c46-8d67-0b8be6dfc311",
			"key": "mediaToChange",
			"value": "{\"id\" : 1,\"title\" : \"Kung Fu Panda 2 Updated\",\"published\" : \"2019-11-11\",\"city\" : \"KungFuLand\",\"descript\" : \"Lord Shen, the scion of a peacock clan that rules Gongmen City in ancient China, seeks to weaponize his family s recently invented fireworks. After discovering from the court s goat soothsayer that a warrior of black-and-white will defeat him if he does not change his ways, Shen leads an army of wolves to exterminate the panda population to avert the prophecy. Shens parents are horrified by this atrocity and exile him as punishment.\",\"imageUrl\" : \"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\"}",
			"type": "string"
		},
		{
			"id": "32e719de-67fe-4214-8c50-678fac63ae16",
			"key": "lastMedia",
			"value": "{\"city\":\"KungFuLand\",\"descript\":\"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",\"id\":1,\"imageUrl\":\"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",\"mediaType\":{\"id\":28,\"label\":\"Test media type\"},\"published\":\"2019-11-11T00:00:00+01:00\",\"publisher\":{\"denomination\":\"Test publisher\",\"id\":14},\"title\":\"Kung Fu Panda\",\"user\":{\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}}",
			"type": "string"
		},
		{
			"id": "15cb399a-c10a-4fe4-99b6-646842055154",
			"key": "lastCommentId",
			"value": "h1><hr class=\"line\" ",
			"type": "string"
		},
		{
			"id": "c596ddba-17fd-47e8-bc43-99a4bf1155cc",
			"key": "lastComment",
			"value": "<!doctype html><html lang=\"fr\"><head><title>État HTTP 404 – Non trouvé</title><style type=\"text/css\">h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>État HTTP 404 – Non trouvé</h1><hr class=\"line\" /><p><b>Type</b> Rapport d'état</p><p><b>message</b> Not Found</p><p><b>description</b> La ressource demandée n'est pas disponible.</p><hr class=\"line\" /><h3>Apache Tomcat/8.5.47</h3></body></html>",
			"type": "string"
		},
		{
			"id": "0441a1dd-3a7f-4086-bd3a-29981046610c",
			"key": "commentTest",
			"value": "{    \"content\": \"test\",    \"media\": {\"city\":\"KungFuLand\",\"descript\":\"In the Valley of Peace, a land in ancient China inhabited by anthropomorphic animals, Po Ping the giant panda is a kung fu fanatic who idolizes the Furious Five – Tigress, Monkey, Mantis, Viper, and Crane – a quintet of kung fu masters trained by Master Shifu, the red panda. However, Po is unable to pursue his dream of learning kung fu as he helps his adoptive father, Mr. Ping the goose, in his noodle restaurant.\",\"id\":1,\"imageUrl\":\"http://fr.web.img5.acsta.net/c_215_290/medias/nmedia/18/36/20/29/18944269.jpg\",\"mediaType\":{\"id\":28,\"label\":\"Test media type\"},\"published\":\"2019-11-11T00:00:00+01:00\",\"publisher\":{\"denomination\":\"Test publisher\",\"id\":14},\"title\":\"Kung Fu Panda\",\"user\":{\"admin\":false,\"firstName\":\"test\",\"id\":6,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}},    \"user\": {\"admin\":false,\"firstName\":\"test\",\"id\":7,\"lastName\":\"test\",\"pseudo\":\"user test\",\"pwd\":\"test\"}}",
			"type": "string"
		},
		{
			"id": "5eb63aae-bb96-4c69-abb5-e60cd7c11ec6",
			"key": "lastMediaCity",
			"value": "KungFuLand",
			"type": "string"
		},
		{
			"id": "8db7d8e6-186c-4237-a450-1ad155aa9b81",
			"key": "lastMediaTitle",
			"value": "Kung Fu Panda",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}